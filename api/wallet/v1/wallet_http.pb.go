// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: api/wallet/v1/wallet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWalletCreateWalletByMnemonic = "/wallet.v1.Wallet/CreateWalletByMnemonic"
const OperationWalletGetWalletAddressByUserId = "/wallet.v1.Wallet/GetWalletAddressByUserId"
const OperationWalletTransfer2WalletAddress = "/wallet.v1.Wallet/Transfer2WalletAddress"

type WalletHTTPServer interface {
	CreateWalletByMnemonic(context.Context, *CreateWalletByMnemonicRequest) (*CreateWalletByMnemonicResponse, error)
	GetWalletAddressByUserId(context.Context, *GetWalletAddressByUserIdRequest) (*GetWalletAddressByUserIdResponse, error)
	Transfer2WalletAddress(context.Context, *Transfer2WalletAddressRequest) (*Transfer2WalletAddressResponse, error)
}

func RegisterWalletHTTPServer(s *http.Server, srv WalletHTTPServer) {
	r := s.Route("/")
	r.POST("/wallet/create/v1", _Wallet_CreateWalletByMnemonic0_HTTP_Handler(srv))
	r.GET("/wallet/address/v1/{user_id}", _Wallet_GetWalletAddressByUserId0_HTTP_Handler(srv))
	r.POST("/wallet/transfer/v1", _Wallet_Transfer2WalletAddress0_HTTP_Handler(srv))
}

func _Wallet_CreateWalletByMnemonic0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateWalletByMnemonicRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletCreateWalletByMnemonic)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateWalletByMnemonic(ctx, req.(*CreateWalletByMnemonicRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateWalletByMnemonicResponse)
		return ctx.Result(200, reply)
	}
}

func _Wallet_GetWalletAddressByUserId0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWalletAddressByUserIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletGetWalletAddressByUserId)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWalletAddressByUserId(ctx, req.(*GetWalletAddressByUserIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetWalletAddressByUserIdResponse)
		return ctx.Result(200, reply)
	}
}

func _Wallet_Transfer2WalletAddress0_HTTP_Handler(srv WalletHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Transfer2WalletAddressRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWalletTransfer2WalletAddress)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Transfer2WalletAddress(ctx, req.(*Transfer2WalletAddressRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Transfer2WalletAddressResponse)
		return ctx.Result(200, reply)
	}
}

type WalletHTTPClient interface {
	CreateWalletByMnemonic(ctx context.Context, req *CreateWalletByMnemonicRequest, opts ...http.CallOption) (rsp *CreateWalletByMnemonicResponse, err error)
	GetWalletAddressByUserId(ctx context.Context, req *GetWalletAddressByUserIdRequest, opts ...http.CallOption) (rsp *GetWalletAddressByUserIdResponse, err error)
	Transfer2WalletAddress(ctx context.Context, req *Transfer2WalletAddressRequest, opts ...http.CallOption) (rsp *Transfer2WalletAddressResponse, err error)
}

type WalletHTTPClientImpl struct {
	cc *http.Client
}

func NewWalletHTTPClient(client *http.Client) WalletHTTPClient {
	return &WalletHTTPClientImpl{client}
}

func (c *WalletHTTPClientImpl) CreateWalletByMnemonic(ctx context.Context, in *CreateWalletByMnemonicRequest, opts ...http.CallOption) (*CreateWalletByMnemonicResponse, error) {
	var out CreateWalletByMnemonicResponse
	pattern := "/wallet/create/v1"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletCreateWalletByMnemonic))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) GetWalletAddressByUserId(ctx context.Context, in *GetWalletAddressByUserIdRequest, opts ...http.CallOption) (*GetWalletAddressByUserIdResponse, error) {
	var out GetWalletAddressByUserIdResponse
	pattern := "/wallet/address/v1/{user_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationWalletGetWalletAddressByUserId))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *WalletHTTPClientImpl) Transfer2WalletAddress(ctx context.Context, in *Transfer2WalletAddressRequest, opts ...http.CallOption) (*Transfer2WalletAddressResponse, error) {
	var out Transfer2WalletAddressResponse
	pattern := "/wallet/transfer/v1"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWalletTransfer2WalletAddress))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
