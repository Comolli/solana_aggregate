// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/wallet/v1/wallet.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Transfer2WalletAddressRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Transfer2WalletAddressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transfer2WalletAddressRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Transfer2WalletAddressRequestMultiError, or nil if none found.
func (m *Transfer2WalletAddressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Transfer2WalletAddressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := Transfer2WalletAddressRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := Transfer2WalletAddressRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReceiverWalletAddress()) < 1 {
		err := Transfer2WalletAddressRequestValidationError{
			field:  "ReceiverWalletAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Transfer2WalletAddressRequestMultiError(errors)
	}

	return nil
}

// Transfer2WalletAddressRequestMultiError is an error wrapping multiple
// validation errors returned by Transfer2WalletAddressRequest.ValidateAll()
// if the designated constraints aren't met.
type Transfer2WalletAddressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transfer2WalletAddressRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transfer2WalletAddressRequestMultiError) AllErrors() []error { return m }

// Transfer2WalletAddressRequestValidationError is the validation error
// returned by Transfer2WalletAddressRequest.Validate if the designated
// constraints aren't met.
type Transfer2WalletAddressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transfer2WalletAddressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transfer2WalletAddressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transfer2WalletAddressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transfer2WalletAddressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transfer2WalletAddressRequestValidationError) ErrorName() string {
	return "Transfer2WalletAddressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Transfer2WalletAddressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer2WalletAddressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transfer2WalletAddressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transfer2WalletAddressRequestValidationError{}

// Validate checks the field values on Transfer2WalletAddressResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Transfer2WalletAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Transfer2WalletAddressResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Transfer2WalletAddressResponseMultiError, or nil if none found.
func (m *Transfer2WalletAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *Transfer2WalletAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionSignature

	if len(errors) > 0 {
		return Transfer2WalletAddressResponseMultiError(errors)
	}

	return nil
}

// Transfer2WalletAddressResponseMultiError is an error wrapping multiple
// validation errors returned by Transfer2WalletAddressResponse.ValidateAll()
// if the designated constraints aren't met.
type Transfer2WalletAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Transfer2WalletAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Transfer2WalletAddressResponseMultiError) AllErrors() []error { return m }

// Transfer2WalletAddressResponseValidationError is the validation error
// returned by Transfer2WalletAddressResponse.Validate if the designated
// constraints aren't met.
type Transfer2WalletAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Transfer2WalletAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Transfer2WalletAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Transfer2WalletAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Transfer2WalletAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Transfer2WalletAddressResponseValidationError) ErrorName() string {
	return "Transfer2WalletAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e Transfer2WalletAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransfer2WalletAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Transfer2WalletAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Transfer2WalletAddressResponseValidationError{}

// Validate checks the field values on GetWalletAddressByUserIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWalletAddressByUserIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletAddressByUserIdRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWalletAddressByUserIdRequestMultiError, or nil if none found.
func (m *GetWalletAddressByUserIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletAddressByUserIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetWalletAddressByUserIdRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWalletAddressByUserIdRequestMultiError(errors)
	}

	return nil
}

// GetWalletAddressByUserIdRequestMultiError is an error wrapping multiple
// validation errors returned by GetWalletAddressByUserIdRequest.ValidateAll()
// if the designated constraints aren't met.
type GetWalletAddressByUserIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletAddressByUserIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletAddressByUserIdRequestMultiError) AllErrors() []error { return m }

// GetWalletAddressByUserIdRequestValidationError is the validation error
// returned by GetWalletAddressByUserIdRequest.Validate if the designated
// constraints aren't met.
type GetWalletAddressByUserIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletAddressByUserIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletAddressByUserIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletAddressByUserIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletAddressByUserIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletAddressByUserIdRequestValidationError) ErrorName() string {
	return "GetWalletAddressByUserIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletAddressByUserIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletAddressByUserIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletAddressByUserIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletAddressByUserIdRequestValidationError{}

// Validate checks the field values on GetWalletAddressByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetWalletAddressByUserIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWalletAddressByUserIdResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetWalletAddressByUserIdResponseMultiError, or nil if none found.
func (m *GetWalletAddressByUserIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWalletAddressByUserIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WalletAddress

	if len(errors) > 0 {
		return GetWalletAddressByUserIdResponseMultiError(errors)
	}

	return nil
}

// GetWalletAddressByUserIdResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetWalletAddressByUserIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWalletAddressByUserIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWalletAddressByUserIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWalletAddressByUserIdResponseMultiError) AllErrors() []error { return m }

// GetWalletAddressByUserIdResponseValidationError is the validation error
// returned by GetWalletAddressByUserIdResponse.Validate if the designated
// constraints aren't met.
type GetWalletAddressByUserIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWalletAddressByUserIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWalletAddressByUserIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWalletAddressByUserIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWalletAddressByUserIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWalletAddressByUserIdResponseValidationError) ErrorName() string {
	return "GetWalletAddressByUserIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWalletAddressByUserIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWalletAddressByUserIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWalletAddressByUserIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWalletAddressByUserIdResponseValidationError{}

// Validate checks the field values on CreateWalletByMnemonicRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletByMnemonicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletByMnemonicRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWalletByMnemonicRequestMultiError, or nil if none found.
func (m *CreateWalletByMnemonicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletByMnemonicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateWalletByMnemonicRequestMultiError(errors)
	}

	return nil
}

// CreateWalletByMnemonicRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWalletByMnemonicRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateWalletByMnemonicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletByMnemonicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletByMnemonicRequestMultiError) AllErrors() []error { return m }

// CreateWalletByMnemonicRequestValidationError is the validation error
// returned by CreateWalletByMnemonicRequest.Validate if the designated
// constraints aren't met.
type CreateWalletByMnemonicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletByMnemonicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletByMnemonicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletByMnemonicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletByMnemonicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletByMnemonicRequestValidationError) ErrorName() string {
	return "CreateWalletByMnemonicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletByMnemonicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletByMnemonicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletByMnemonicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletByMnemonicRequestValidationError{}

// Validate checks the field values on CreateWalletByMnemonicResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWalletByMnemonicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWalletByMnemonicResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWalletByMnemonicResponseMultiError, or nil if none found.
func (m *CreateWalletByMnemonicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWalletByMnemonicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PrivateKey

	// no validation rules for PublicKey

	if len(errors) > 0 {
		return CreateWalletByMnemonicResponseMultiError(errors)
	}

	return nil
}

// CreateWalletByMnemonicResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWalletByMnemonicResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateWalletByMnemonicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWalletByMnemonicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWalletByMnemonicResponseMultiError) AllErrors() []error { return m }

// CreateWalletByMnemonicResponseValidationError is the validation error
// returned by CreateWalletByMnemonicResponse.Validate if the designated
// constraints aren't met.
type CreateWalletByMnemonicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWalletByMnemonicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWalletByMnemonicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWalletByMnemonicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWalletByMnemonicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWalletByMnemonicResponseValidationError) ErrorName() string {
	return "CreateWalletByMnemonicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWalletByMnemonicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWalletByMnemonicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWalletByMnemonicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWalletByMnemonicResponseValidationError{}
